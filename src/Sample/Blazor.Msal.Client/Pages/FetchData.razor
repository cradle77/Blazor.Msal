@page "/fetchdata"
@inject HttpClient Http
@inject IAuthenticationManager AuthenticationManager

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<AuthorizeView>
    <Authorized>
        @if (_forecasts == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in _forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        @*The AdditionalScopes parameter avoid the two separate
        consent popups which are not allowed by browers' blockers*@

        Please <LoginStatus AdditionalScopes="@_apiScope"></LoginStatus> before accessing this page
    </NotAuthorized>
</AuthorizeView>


@code {
    private string _apiScope = "app://blazor.msal.api/api.access";
    private WeatherForecast[] _forecasts;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var state = await this.authenticationStateTask;
        if (!state.User.Identity.IsAuthenticated)
        {
            return;
        }

        var token = await this.AuthenticationManager.GetAccessTokenAsync(
            // passing the list of requested scopes
            _apiScope);

        this.Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.AccessToken);

        _forecasts = await Http.GetJsonAsync<WeatherForecast[]>("https://localhost:5101/weatherforecast");
    }
}
